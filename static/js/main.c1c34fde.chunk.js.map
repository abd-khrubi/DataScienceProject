{"version":3,"sources":["components/UserInputStage.js","components/Stages.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["UserInputStage","props","state","React","MeatStage","className","onClick","choose","Component","CarbStage","PiquantStage","MainPage","stage","meat","carb","piquant","this","setState","stageDiv","x","chooseMeat","chooseCarb","choosePiquant","localStorage","setItem","JSON","stringify","a","b","o","parse","getItem","data","recipes","splice","css","App","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ijtzBAEaA,EAAb,YAEI,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,GAFE,EAFvB,sEASQ,OAAO,yDATf,GAAoCC,aCCvBC,EAAb,iLACc,IAAD,OACL,OACI,yBAAKC,UAAU,gBACX,4BAAQC,QAAS,kBAAM,EAAKL,MAAMM,OAAO,aAAzC,WACA,4BAAQD,QAAS,kBAAM,EAAKL,MAAMM,OAAO,UAAzC,QACA,4BAAQD,QAAS,kBAAM,EAAKL,MAAMM,OAAO,UAAzC,aANhB,GAA+BJ,IAAMK,WAYxBC,EAAb,iLACc,IAAD,OACL,OACI,yBAAKJ,UAAU,gBACX,4BAAQC,QAAS,kBAAM,EAAKL,MAAMM,OAAO,WAAzC,SACA,4BAAQD,QAAS,kBAAM,EAAKL,MAAMM,OAAO,UAAzC,QACA,4BAAQD,QAAS,kBAAM,EAAKL,MAAMM,OAAO,WAAzC,SACA,4BAAQD,QAAS,kBAAM,EAAKL,MAAMM,OAAO,YAAzC,eAPhB,GAA+BJ,IAAMK,WAaxBE,EAAb,iLACc,IAAD,OACL,OACI,yBAAKL,UAAU,mBACX,4BAAQC,QAAS,kBAAM,EAAKL,MAAMM,OAAO,UAAzC,QACA,4BAAQD,QAAS,kBAAM,EAAKL,MAAMM,OAAO,WAAzC,cALhB,GAAkCJ,IAAMK,W,QCmDzBG,E,YAxEX,WAAYV,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTU,MAAO,EACPC,KAAM,KACNC,KAAM,KACNC,QAAS,MAPE,E,wEAWRF,GACPG,KAAKC,SAAS,CACVJ,KAAMA,EACND,MAAO,M,iCAIJE,GACPE,KAAKC,SAAS,CACVH,KAAMA,EACNF,MAAO,M,oCAIDG,GACVC,KAAKC,SAAS,CACVF,QAASA,EACTH,MAAO,M,+BAIL,IACFM,EADC,OAEL,OAAQF,KAAKd,MAAMU,OACf,QACIM,EAAW,KACX,MACJ,KAAK,EACDA,EAAW,kBAAC,EAAD,CAAWX,OAAQ,SAACY,GAAO,EAAKC,WAAWD,MACtD,MACJ,KAAK,EACDD,EAAW,kBAAC,EAAD,CAAWX,OAAQ,SAACY,GAAD,OAAO,EAAKE,WAAWF,MACrD,MACJ,KAAK,EACDD,EAAW,kBAAC,EAAD,CAAcX,OAAQ,SAACY,GAAD,OAAO,EAAKG,cAAcH,MAC3D,MACJ,KAAK,EACDD,EAAW,kBAAC,EAAD,MAGnBK,aAAaC,QAAQ,OAAQC,KAAKC,UAAU,CACxCC,EAAG,GACHC,EAAG,MAEP,IAAIC,EAAIJ,KAAKK,MAAMP,aAAaQ,QAAQ,SACxC,OACI,yBAAK1B,UAAU,aACVa,EAMD,2BAAIO,KAAKC,UAAUV,KAAKd,MAAO,KAAM,OACrC,2BAAIuB,KAAKC,UAAUG,EAAG,KAAM,OAC5B,2BAAIJ,KAAKC,UAAUM,EAAKC,QAAQC,OAAO,EAAG,GAAI,KAAM,Y,GApE7C/B,IAAMK,W,mICEZ2B,cAAH,KAqDCC,MAdf,WACI,OACI,kBAAC,IAAD,KACI,yBAAK/B,UAAU,OACX,4BAAQA,UAAU,cAEd,kBAAC,EAAD,CAAUgC,MAAO,UCxCjBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c1c34fde.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nexport class UserInputStage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return <div>Please choose a recipe</div>\r\n    }\r\n}","import React from \"react\";\r\nimport {UserInputStage} from \"./UserInputStage\";\r\n\r\nexport class MeatStage extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='meat-chooser'>\r\n                <button onClick={() => this.props.choose('chicken')}>Chicken</button>\r\n                <button onClick={() => this.props.choose('Beef')}>Beef</button>\r\n                <button onClick={() => this.props.choose('Pork')}>Pork</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class CarbStage extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='carb-chooser'>\r\n                <button onClick={() => this.props.choose('bread')}>Bread</button>\r\n                <button onClick={() => this.props.choose('rice')}>Rice</button>\r\n                <button onClick={() => this.props.choose('pasta')}>Pasta</button>\r\n                <button onClick={() => this.props.choose('potato')}>Potato</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class PiquantStage extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='piquant-chooser'>\r\n                <button onClick={() => this.props.choose('mild')}>Mild</button>\r\n                <button onClick={() => this.props.choose('spicy')}>Spicy</button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {MeatStage, PiquantStage, CarbStage} from \"./Stages.js\";\r\nimport {UserInputStage} from \"./UserInputStage\";\r\nimport data from '../data/recipes/yummly_pork_rice_spicy';\r\n\r\nclass MainPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            stage: 0,\r\n            meat: null,\r\n            carb: null,\r\n            piquant: null,\r\n        };\r\n    }\r\n\r\n    chooseMeat(meat) {\r\n        this.setState({\r\n            meat: meat,\r\n            stage: 1,\r\n        });\r\n    }\r\n\r\n    chooseCarb(carb) {\r\n        this.setState({\r\n            carb: carb,\r\n            stage: 2,\r\n        });\r\n    }\r\n\r\n    choosePiquant(piquant) {\r\n        this.setState({\r\n            piquant: piquant,\r\n            stage: 3\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let stageDiv;\r\n        switch (this.state.stage) {\r\n            default:\r\n                stageDiv = null;\r\n                break;\r\n            case 0:\r\n                stageDiv = <MeatStage choose={(x) => {this.chooseMeat(x)}}/>;\r\n                break;\r\n            case 1:\r\n                stageDiv = <CarbStage choose={(x) => this.chooseCarb(x)}/>;\r\n                break;\r\n            case 2:\r\n                stageDiv = <PiquantStage choose={(x) => this.choosePiquant(x)}/>;\r\n                break;\r\n            case 3:\r\n                stageDiv = <UserInputStage/>\r\n        }\r\n\r\n        localStorage.setItem(\"test\", JSON.stringify({\r\n            a: 12,\r\n            b: 10\r\n        }));\r\n        let o = JSON.parse(localStorage.getItem('test'));\r\n        return (\r\n            <div className='main-page'>\r\n                {stageDiv}\r\n                {/*<button className={'increment'}*/}\r\n                {/*        onClick={() => {*/}\r\n                {/*            this.setState({stage: this.state.stage + 1})*/}\r\n                {/*        }}>Next*/}\r\n                {/*</button>*/}\r\n                <p>{JSON.stringify(this.state, null, '\\t')}</p>\r\n                <p>{JSON.stringify(o, null, '\\t')}</p>\r\n                <p>{JSON.stringify(data.recipes.splice(1, 2), null, '\\t')}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\nimport './App.css';\nimport {useWait, Waiter} from \"react-wait\";\nimport {DotLoader} from \"react-spinners\";\nimport {css} from \"@emotion/core\";\nimport MainPage from \"./components/MainPage\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nfunction UserCreateButton() {\n    const {startWaiting, endWaiting, isWaiting, Wait} = useWait();\n\n    return (\n        <div>\n            <button\n                onClick={() => startWaiting(\"creating user\")}\n                disabled={isWaiting(\"creating user\")}\n            >\n                Create user\n            </button>\n            <button onClick={() => endWaiting('creating user')}\n                    disabled={!isWaiting('creating user')}>\n                End waiting\n            </button>\n\n            <Wait on=\"creating user\" fallback={\n                <div className=\"sweet-loading\">\n                    <DotLoader\n                        css={override}\n                        size={20}\n                        //size={\"150px\"} this also works\n                        color={\"#1bbc18\"}\n                        // loading={true}\n                    />\n                </div>\n            }>\n                <div>Create User</div>\n            </Wait>\n        </div>\n    );\n}\n\nfunction App() {\n    return (\n        <Waiter>\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    {/*<UserCreateButton/>*/}\n                    <MainPage value={124}/>\n                </header>\n\n            </div>\n        </Waiter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}