{"version":3,"sources":["data/recipes sync /^/yummly_.*$","yummly_logo.png","components/Stages.js","logic/ingrediant_cleaning.js","components/UserInputStage.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","MeatStage","className","onClick","props","choose","React","Component","CarbStage","PiquantStage","require","override","css","UserInputStage","data","protein","carb","piquant","recipe","recipes","Math","floor","random","length","state","isWaiting","size","color","this","setState","startWaiting","setTimeout","stopWaiting","drawWaiting","src","image_url","yummly_image","alt","width","height","test","MainPage","stage","meat","stageDiv","x","chooseMeat","chooseCarb","choosePiquant","App","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fc8cf5bc.chunk.js","sourcesContent":["var map = {\n\t\"./yummly_beef_bread_mild\": 19,\n\t\"./yummly_beef_bread_mild.json\": 19,\n\t\"./yummly_beef_bread_spicy\": 20,\n\t\"./yummly_beef_bread_spicy.json\": 20,\n\t\"./yummly_beef_pasta_mild\": 21,\n\t\"./yummly_beef_pasta_mild.json\": 21,\n\t\"./yummly_beef_pasta_spicy\": 22,\n\t\"./yummly_beef_pasta_spicy.json\": 22,\n\t\"./yummly_beef_potatoes_mild\": 23,\n\t\"./yummly_beef_potatoes_mild.json\": 23,\n\t\"./yummly_beef_potatoes_spicy\": 24,\n\t\"./yummly_beef_potatoes_spicy.json\": 24,\n\t\"./yummly_beef_rice_mild\": 25,\n\t\"./yummly_beef_rice_mild.json\": 25,\n\t\"./yummly_beef_rice_spicy\": 26,\n\t\"./yummly_beef_rice_spicy.json\": 26,\n\t\"./yummly_chicken_bread_mild\": 27,\n\t\"./yummly_chicken_bread_mild.json\": 27,\n\t\"./yummly_chicken_bread_spicy\": 28,\n\t\"./yummly_chicken_bread_spicy.json\": 28,\n\t\"./yummly_chicken_pasta_mild\": 29,\n\t\"./yummly_chicken_pasta_mild.json\": 29,\n\t\"./yummly_chicken_pasta_spicy\": 30,\n\t\"./yummly_chicken_pasta_spicy.json\": 30,\n\t\"./yummly_chicken_potatoes_mild\": 31,\n\t\"./yummly_chicken_potatoes_mild.json\": 31,\n\t\"./yummly_chicken_potatoes_spicy\": 32,\n\t\"./yummly_chicken_potatoes_spicy.json\": 32,\n\t\"./yummly_chicken_rice_mild\": 33,\n\t\"./yummly_chicken_rice_mild.json\": 33,\n\t\"./yummly_chicken_rice_spicy\": 34,\n\t\"./yummly_chicken_rice_spicy.json\": 34,\n\t\"./yummly_pork_bread_mild\": 35,\n\t\"./yummly_pork_bread_mild.json\": 35,\n\t\"./yummly_pork_bread_spicy\": 36,\n\t\"./yummly_pork_bread_spicy.json\": 36,\n\t\"./yummly_pork_pasta_mild\": 37,\n\t\"./yummly_pork_pasta_mild.json\": 37,\n\t\"./yummly_pork_pasta_spicy\": 38,\n\t\"./yummly_pork_pasta_spicy.json\": 38,\n\t\"./yummly_pork_potatoes_mild\": 39,\n\t\"./yummly_pork_potatoes_mild.json\": 39,\n\t\"./yummly_pork_potatoes_spicy\": 40,\n\t\"./yummly_pork_potatoes_spicy.json\": 40,\n\t\"./yummly_pork_rice_mild\": 41,\n\t\"./yummly_pork_rice_mild.json\": 41,\n\t\"./yummly_pork_rice_spicy\": 10,\n\t\"./yummly_pork_rice_spicy.json\": 10\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 18;","module.exports = __webpack_public_path__ + \"static/media/yummly_logo.eb1028dc.png\";","import React from \"react\";\r\n\r\nexport class MeatStage extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='meat-chooser'>\r\n                <button onClick={() => this.props.choose('chicken')}>Chicken</button>\r\n                <button onClick={() => this.props.choose('beef')}>Beef</button>\r\n                <button onClick={() => this.props.choose('pork')}>Pork</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class CarbStage extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='carb-chooser'>\r\n                <button onClick={() => this.props.choose('bread')}>Bread</button>\r\n                <button onClick={() => this.props.choose('rice')}>Rice</button>\r\n                <button onClick={() => this.props.choose('pasta')}>Pasta</button>\r\n                <button onClick={() => this.props.choose('potato')}>Potato</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class PiquantStage extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='piquant-chooser'>\r\n                <button onClick={() => this.props.choose('mild')}>Mild</button>\r\n                <button onClick={() => this.props.choose('spicy')}>Spicy</button>\r\n            </div>\r\n        );\r\n    }\r\n}","let posTagger = require('wink-pos-tagger');\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction clean_pepper(name, category) {\r\n    if (!name.includes(\"pepper\") && !name.includes(\"jala\") && !name.includes(\"chili\") && !name.includes(\"chill\")) {\r\n        return name;\r\n    } else {\r\n        if (category === \"Baking & Cooking\") {\r\n            if (name.includes(\"cayenn\")) {\r\n                return \"cayenne\"\r\n            } else if (name.includes(\"black\") || name.includes(\"white\")) {\r\n                return \"black pepper\"\r\n            } else {\r\n                return \"chili powder\"\r\n            }\r\n        } else if (category === \"Produce\") {\r\n            if (name.includes(\"bell\") || name.includes(\"sweet\") || /peppers?/.exec(name) !== null) {\r\n                return \"sweet pepper\"\r\n            } else {\r\n                return \"hot pepper\"\r\n            }\r\n        } else if (category === \"Condiments\") {\r\n            if (name.includes('peppercorn')) {\r\n                return 'black pepper'\r\n            } else if (name.includes('pepper sauc') || name.includes('pepper paste')) {\r\n                return 'hot sauce'\r\n            } else if (name.includes('pepper')) {\r\n                return 'hot pepper'\r\n            }\r\n        }\r\n    }\r\n    return name;\r\n}\r\n\r\nfunction reduce_categories(name, category) {\r\n    if (category === 'Alcohol') {\r\n        return 'alcohol'\r\n    } else if (category === 'Seafood' && !name.includes('anchov')) {\r\n        return 'seafoog'\r\n    } else if (category === 'Coffee & Tea') {\r\n        return 'coffee-tea'\r\n    } else if (category === 'Frozen Desserts') {\r\n        return 'frozen desserts'\r\n    }\r\n    return name;\r\n}\r\n\r\nfunction clean_dairy(name, category) {\r\n    if (category !== 'Dairy') {\r\n        return name;\r\n    }\r\n\r\n    if (name.includes('jack')) {\r\n        return 'cheese'\r\n    }\r\n    if (name.includes('butter')) {\r\n        if (name.includes('milk')) {\r\n            return 'buttermilk'\r\n        } else if (name.includes('cup')) {\r\n            return 'buttercup'\r\n        } else if (name.includes('apple')) {\r\n            return 'apple butter'\r\n        } else if (name.includes('peanut') || name.includes('almond') || name.includes('cashew')) {\r\n            return 'nut butter'\r\n        } else {\r\n            return 'butter'\r\n        }\r\n    } else if (name.includes('milk')) {\r\n        if (name.includes('coconut')) {\r\n            return 'coconut milk';\r\n        } else if (name.includes('nut') || name.includes('cashew') || name.includes('almond')) {\r\n            return 'nut milk';\r\n        }\r\n    }\r\n    return name;\r\n}\r\n\r\nfunction clean_starches(name, category) {\r\n    if (name.includes('starch')) {\r\n        return 'starch'\r\n    }\r\n    return name;\r\n}\r\n\r\nfunction clean_nuts(name, category) {\r\n    if (category === 'Dairy') {\r\n        return name;\r\n    }\r\n    if (name.includes('coconut')) {\r\n        return 'coconut';\r\n    } else if (name.includes('pecan') || name.includes('cashew') ||\r\n        name.includes('almond') || name.includes('pistachio') ||\r\n        name.includes('nut')) {\r\n        return 'nut';\r\n    }\r\n    return name;\r\n}\r\n\r\nfunction clean_oils(name, category) {\r\n    if (name.includes('spray') && !name.includes('olive')) {\r\n        return 'cooking oil'\r\n    } else if (name.includes('oil)')) {\r\n        if (name.includes('olive')) {\r\n            return 'olive oil';\r\n        } else if (name.includes('canola') || name.includes('sesame') || name.includes('cooking')) {\r\n            return 'cooking oil';\r\n        }\r\n    }\r\n    return name;\r\n}\r\n\r\nfunction clean_nlp(name, category) {\r\n    let tagger = posTagger();\r\n    let verb_pos = ['VB', 'VBD', 'VBG', 'VBN', 'VBD', 'VBZ'];\r\n    let pos = tagger.tagSentence(name);\r\n    let cleaned_pos = pos.filter(word => !verb_pos.includes(word.pos));\r\n    let cleaned_word = cleaned_pos.map(word => word.value);\r\n    return cleaned_word.join(' ');\r\n}\r\n\r\nfunction clean_tokens(name, category) {\r\n    let tokens = {\r\n        'garlic': (category === 'Baking & Cooking') ? 'garlic powder' : 'garlic',\r\n        'onion': (category === 'Baking & Cooking') ? 'onion powder' : 'onion',\r\n        'shallot': 'shallot',\r\n        'salt': 'salt',\r\n        'stock': 'stock',\r\n        'broth': 'stock',\r\n        'gravy': 'stock',\r\n        'bouillon': 'stock',\r\n        'soup': 'stock',\r\n        'cheese': 'cheese',\r\n        'mozzarella': 'cheese',\r\n        'cheddar': 'cheese',\r\n        'ricotta': 'cheese',\r\n        'milk': 'milk',\r\n        'heavy cream': 'heavy cream',\r\n        'whipping cream': 'heavy cream',\r\n        'sour cream': 'sour cream',\r\n\r\n        'parme': 'cheese',\r\n        'mushroom': 'mushroom',\r\n        'shiitake': 'mushroom',\r\n        'cabbage': 'cabbage',\r\n        'lettuce': 'lettuce',\r\n        'tomato': 'tomato',\r\n        'marinara': 'tomato',\r\n        'vinegar': 'vinegar',\r\n        'bean': 'beans',\r\n        'soy': 'soy',\r\n        'egg': 'eggs',\r\n        'crumb': 'crumbs',\r\n        'apple': 'apple',\r\n        'basil': 'basil',\r\n        'anchov': 'anchovy',\r\n        'syrup': 'syrup',\r\n        'oat': 'oats',\r\n        'waffl': 'waffle',\r\n        'cereal': 'cereal',\r\n        'molass': 'syrup',\r\n        'guacamole': 'avocado',\r\n        'avocado': 'avocado',\r\n        'hot sauce': 'hot sauce',\r\n        'tabasco': 'hot sauce',\r\n        'mayo': 'mayonnaise',\r\n        'mustard': 'mustard',\r\n        'pickle': 'pickles',\r\n        'jam': 'jam',\r\n        'dressing': 'dressing',\r\n        'worchestire': 'worchestire sauce',\r\n        'worcestershire': 'worchestire sauce',\r\n        'sour sauce': 'sweet and sour sauce',\r\n        'margarin': 'margarin',\r\n\r\n        'radish': category === 'Condiments' ? 'horse radish' : name,\r\n        'relish': 'relish',\r\n        'olive': 'olives',\r\n        'teriyaki': 'teriyaki',\r\n        'barbeque': 'bbq',\r\n        'bbq': 'bbq',\r\n        'yogurt': 'yogurt',\r\n        'peppercorn': 'black pepper',\r\n        'curry': 'curry',\r\n        'corn\\\\s?flakes?': 'cereal',\r\n        'hash': '',\r\n        'corn': 'corns',\r\n        'vegetable': 'vegetables',\r\n        'cole\\\\s?slaw': 'cole slaw',\r\n        'ranch': 'ranch',\r\n        'hummus': 'hummus',\r\n        'garbanzo': 'hummus',\r\n        'chick\\\\s?pea': 'hummus',\r\n        'pineappl': 'pineapple',\r\n        'brocc': 'broccoli',\r\n        'cauli': 'cauliflower',\r\n        'potato': '',\r\n        'rice': '',\r\n    };\r\n\r\n    for (let token in tokens) {\r\n        let r = RegExp(token);\r\n        if (r.exec(name) != null) {\r\n            return tokens[token];\r\n        }\r\n    }\r\n    return name;\r\n}\r\n\r\nfunction clean_redundant(name, category) {\r\n    let redundant = [\r\n\t\t'ground',\r\n\t\t'fresh',\r\n\t\t'crushed',\r\n\t\t'powder',\r\n\t\t'granulated',\r\n\t\t'hungarian',\r\n\t\t'dried',\r\n\t\t'leaves',\r\n\t\t'extra',\r\n\t\t'virgin',\r\n\t\t'roasted',\r\n\t\t'pure',\r\n\t\t'extra virgin',\r\n\t\t'flakes',\r\n\t\t'seeds',\r\n\t\t'fine',\r\n\t\t'neutral',\r\n\t\t'smoked',\r\n\t\t'kosher',\r\n\t\t'cracked',\r\n\t\t'dehydrated',\r\n\t\t'red',\r\n\t\t'hot',\r\n\t\t'dry',\r\n\t\t'dark',\r\n\t\t'brown',\r\n\t\t'crushed',\r\n\t\t'Diamond',\r\n\t\t'Crystal',\r\n\t\t'light',\r\n\t\t'brown',\r\n\t\t'sorghum',\r\n\t\t'white',\r\n\t\t'coarse',\r\n\t\t'toasted',\r\n\t\t'blanched',\r\n\t\t'threads',\r\n\t\t'freshly',\r\n\t\t'all purpose',\r\n\t\t'warm',\r\n\t\t'hot',\r\n\t\t'filtered',\r\n\t\t'juice',\r\n\t\t'orange',\r\n\t\t'sprouts',\r\n\t\t'head',\r\n\t\t'minced',\r\n\t\t'hearts',\r\n\t\t'roma',\r\n\t\t'chopped',\r\n\t\t'spring',\r\n\t\t'wedge',\r\n\t\t'small',\r\n\t\t'sweet',\r\n\t\t'green',\r\n\t\t'floret',\r\n\t\t'baby',\r\n\t\t'baking',\r\n\t\t'medium',\r\n\t\t'leaves',\r\n\t\t'leaf',\r\n\t\t'garnish',\r\n\t\t'chips',\r\n\r\n\t\t'slices',\r\n\t\t'whole',\r\n\t\t'ripe',\r\n\t];\r\n    for (let word in redundant) {\r\n        if (name.includes(word)) {\r\n            name = name.replace(word, '');\r\n        }\r\n    }\r\n    return name;\r\n}\r\n\r\nfunction remove_category(category) {\r\n    let to_remove = [\r\n        'Meat',\r\n        'Bakery',\r\n        'Floral',\r\n        'Packaged Meals & Side Dishes',\r\n        'Soy Products',\r\n        'Pharmacy & First-Aid',\r\n        'Other',\r\n        'null',\r\n    ];\r\n    return to_remove.includes(category)\r\n}\r\n\r\n\r\nfunction cleanIngredient(name, category) {\r\n    if (remove_category(category)) {\r\n        return null;\r\n    }\r\n\r\n    let filters = [\r\n\t\tclean_pepper,\r\n\t\tclean_starches,\r\n\t\tclean_dairy,\r\n\t\tclean_oils,\r\n\t\treduce_categories,\r\n\t\tclean_tokens,\r\n\t\tclean_nuts,\r\n        clean_redundant,\r\n\t\tclean_nlp,\r\n    ];\r\n    for (let filter in filters) {\r\n        let cleaned_name = filters[filter](name, category);\r\n        if (cleaned_name !== name) {\r\n            return cleaned_name === '' ? null : cleaned_name;\r\n        }\r\n    }\r\n    return name;\r\n}\r\n\r\n\r\nexport default cleanIngredient;\r\n","import * as React from \"react\";\r\nimport {css} from \"@emotion/core\";\r\nimport {DotLoader} from \"react-spinners\";\r\nimport yummly_image from '../yummly_logo.png';\r\nimport Sababa from \"../logic/algorithm\";\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  border-color: red;\r\n`;\r\n\r\n\r\nexport class UserInputStage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let data = require('../data/recipes/yummly_' + props.protein + '_' + props.carb + '_' + props.piquant);\r\n        let recipe = data.recipes[Math.floor(Math.random() * data.recipes.length)];\r\n        // this.sababa = new Sababa(this.props.protein, this.props.carb, this.props.piquant,\r\n        //     () => this.startWaiting(), () => this.stopWaiting());\r\n        this.state = {\r\n            isWaiting: false,\r\n            recipe: recipe,\r\n            data: data\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.sababa.buildVector();\r\n        // console.log(this.sababa)\r\n        // this.startWaiting();\r\n\r\n    }\r\n\r\n    drawWaiting() {\r\n        return (\r\n            <div className=\"sweet-loading\">\r\n                <DotLoader\r\n                    css={override}\r\n                    size={50}\r\n                    //size={\"150px\"} this also works\r\n                    color={'#60ff43'}\r\n                    // loading={true}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    stopWaiting() {\r\n        this.setState({isWaiting: false})\r\n    }\r\n\r\n    startWaiting() {\r\n        this.setState({isWaiting: true})\r\n    }\r\n\r\n    test() {\r\n        this.startWaiting();\r\n        let recipe = this.state.data.recipes[Math.floor(Math.random() * this.state.data.recipes.length)];\r\n        this.setState({recipe: recipe})\r\n\r\n        setTimeout(() => this.stopWaiting(), 1000);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isWaiting) {\r\n            return this.drawWaiting();\r\n        } else {\r\n            return (\r\n                <div className='recipes'>\r\n                    <img\r\n                        src={this.state.recipe.image_url.length === 0 ? yummly_image : this.state.recipe.image_url}\r\n                        alt='d'\r\n                        width='200' height='200'\r\n                        onClick={() => {\r\n                            this.test();\r\n                        }}\r\n                    />\r\n                    <div>\r\n                        <button onClick={() => this.test()}>&#128078;</button>\r\n                        <button onClick={() => this.test()}>&#128077;</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport {MeatStage, PiquantStage, CarbStage} from \"./Stages.js\";\r\nimport {UserInputStage} from \"./UserInputStage\";\r\nimport data from '../data/recipes/yummly_pork_rice_spicy';\r\n\r\nclass MainPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            stage: 0,\r\n            meat: null,\r\n            carb: null,\r\n            piquant: null,\r\n        };\r\n    }\r\n\r\n    chooseMeat(meat) {\r\n        this.setState({\r\n            meat: meat,\r\n            stage: 1,\r\n        });\r\n    }\r\n\r\n    chooseCarb(carb) {\r\n        this.setState({\r\n            carb: carb,\r\n            stage: 2,\r\n        });\r\n    }\r\n\r\n    choosePiquant(piquant) {\r\n        this.setState({\r\n            piquant: piquant,\r\n            stage: 3\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let stageDiv;\r\n        switch (this.state.stage) {\r\n            default:\r\n                stageDiv = null;\r\n                break;\r\n            case 0:\r\n                stageDiv = <MeatStage choose={(x) => this.chooseMeat(x)}/>;\r\n                break;\r\n            case 1:\r\n                stageDiv = <CarbStage choose={(x) => this.chooseCarb(x)}/>;\r\n                break;\r\n            case 2:\r\n                stageDiv = <PiquantStage choose={(x) => this.choosePiquant(x)}/>;\r\n                break;\r\n            case 3:\r\n                stageDiv = <UserInputStage protein={this.state.meat} carb={this.state.carb} piquant={this.state.piquant}/>;\r\n                // stageDiv = <UserInputStage protein='beef' carb='bread' piquant='mild'/>;\r\n                break;\r\n        }\r\n\r\n        // let o = JSON.parse(localStorage.getItem('test'));\r\n        return (\r\n            <div className='main-page'>\r\n                {stageDiv}\r\n                {/*<button className={'increment'}*/}\r\n                {/*        onClick={() => {*/}\r\n                {/*            this.setState({stage: this.state.stage + 1})*/}\r\n                {/*        }}>Next*/}\r\n                {/*</button>*/}\r\n                {/*<p>{JSON.stringify(this.state, null, '\\t')}</p>*/}\r\n                {/*<p>{JSON.stringify(o, null, '\\t')}</p>*/}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\nimport './App.css';\nimport MainPage from \"./components/MainPage\";\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                {/*<UserCreateButton/>*/}\n                <MainPage value={124}/>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}